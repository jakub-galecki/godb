package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Manifest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "L0":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "L0")
				return
			}
			if cap(z.L0) >= int(zb0002) {
				z.L0 = (z.L0)[:zb0002]
			} else {
				z.L0 = make([]string, zb0002)
			}
			for za0001 := range z.L0 {
				z.L0[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "L0", za0001)
					return
				}
			}
		case "Levels":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Levels")
				return
			}
			if cap(z.Levels) >= int(zb0003) {
				z.Levels = (z.Levels)[:zb0003]
			} else {
				z.Levels = make([][]string, zb0003)
			}
			for za0002 := range z.Levels {
				var zb0004 uint32
				zb0004, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Levels", za0002)
					return
				}
				if cap(z.Levels[za0002]) >= int(zb0004) {
					z.Levels[za0002] = (z.Levels[za0002])[:zb0004]
				} else {
					z.Levels[za0002] = make([]string, zb0004)
				}
				for za0003 := range z.Levels[za0002] {
					z.Levels[za0002][za0003], err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Levels", za0002, za0003)
						return
					}
				}
			}
		case "Table":
			z.Table, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Table")
				return
			}
		case "CreatedAt":
			z.CreatedAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "Path":
			z.Path, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "BlockSize":
			z.BlockSize, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "BlockSize")
				return
			}
		case "LevelCount":
			z.LevelCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LevelCount")
				return
			}
		case "MaxLevels":
			z.MaxLevels, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "MaxLevels")
				return
			}
		case "SeqNum":
			z.SeqNum, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "SeqNum")
				return
			}
		case "NextFileNumber":
			z.NextFileNumber, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "NextFileNumber")
				return
			}
		case "LastFlushedFileNumber":
			z.LastFlushedFileNumber, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "LastFlushedFileNumber")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Manifest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 12
	// write "Id"
	err = en.Append(0x8c, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "L0"
	err = en.Append(0xa2, 0x4c, 0x30)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.L0)))
	if err != nil {
		err = msgp.WrapError(err, "L0")
		return
	}
	for za0001 := range z.L0 {
		err = en.WriteString(z.L0[za0001])
		if err != nil {
			err = msgp.WrapError(err, "L0", za0001)
			return
		}
	}
	// write "Levels"
	err = en.Append(0xa6, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Levels)))
	if err != nil {
		err = msgp.WrapError(err, "Levels")
		return
	}
	for za0002 := range z.Levels {
		err = en.WriteArrayHeader(uint32(len(z.Levels[za0002])))
		if err != nil {
			err = msgp.WrapError(err, "Levels", za0002)
			return
		}
		for za0003 := range z.Levels[za0002] {
			err = en.WriteString(z.Levels[za0002][za0003])
			if err != nil {
				err = msgp.WrapError(err, "Levels", za0002, za0003)
				return
			}
		}
	}
	// write "Table"
	err = en.Append(0xa5, 0x54, 0x61, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Table)
	if err != nil {
		err = msgp.WrapError(err, "Table")
		return
	}
	// write "CreatedAt"
	err = en.Append(0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	// write "Path"
	err = en.Append(0xa4, 0x50, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Path)
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return
	}
	// write "BlockSize"
	err = en.Append(0xa9, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.BlockSize)
	if err != nil {
		err = msgp.WrapError(err, "BlockSize")
		return
	}
	// write "LevelCount"
	err = en.Append(0xaa, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LevelCount)
	if err != nil {
		err = msgp.WrapError(err, "LevelCount")
		return
	}
	// write "MaxLevels"
	err = en.Append(0xa9, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MaxLevels)
	if err != nil {
		err = msgp.WrapError(err, "MaxLevels")
		return
	}
	// write "SeqNum"
	err = en.Append(0xa6, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.SeqNum)
	if err != nil {
		err = msgp.WrapError(err, "SeqNum")
		return
	}
	// write "NextFileNumber"
	err = en.Append(0xae, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.NextFileNumber)
	if err != nil {
		err = msgp.WrapError(err, "NextFileNumber")
		return
	}
	// write "LastFlushedFileNumber"
	err = en.Append(0xb5, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.LastFlushedFileNumber)
	if err != nil {
		err = msgp.WrapError(err, "LastFlushedFileNumber")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Manifest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 12
	// string "Id"
	o = append(o, 0x8c, 0xa2, 0x49, 0x64)
	o = msgp.AppendString(o, z.Id)
	// string "L0"
	o = append(o, 0xa2, 0x4c, 0x30)
	o = msgp.AppendArrayHeader(o, uint32(len(z.L0)))
	for za0001 := range z.L0 {
		o = msgp.AppendString(o, z.L0[za0001])
	}
	// string "Levels"
	o = append(o, 0xa6, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Levels)))
	for za0002 := range z.Levels {
		o = msgp.AppendArrayHeader(o, uint32(len(z.Levels[za0002])))
		for za0003 := range z.Levels[za0002] {
			o = msgp.AppendString(o, z.Levels[za0002][za0003])
		}
	}
	// string "Table"
	o = append(o, 0xa5, 0x54, 0x61, 0x62, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Table)
	// string "CreatedAt"
	o = append(o, 0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendInt64(o, z.CreatedAt)
	// string "Path"
	o = append(o, 0xa4, 0x50, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Path)
	// string "BlockSize"
	o = append(o, 0xa9, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendUint64(o, z.BlockSize)
	// string "LevelCount"
	o = append(o, 0xaa, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.LevelCount)
	// string "MaxLevels"
	o = append(o, 0xa9, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73)
	o = msgp.AppendInt(o, z.MaxLevels)
	// string "SeqNum"
	o = append(o, 0xa6, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d)
	o = msgp.AppendUint64(o, z.SeqNum)
	// string "NextFileNumber"
	o = append(o, 0xae, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendUint64(o, z.NextFileNumber)
	// string "LastFlushedFileNumber"
	o = append(o, 0xb5, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendUint64(o, z.LastFlushedFileNumber)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Manifest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "L0":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "L0")
				return
			}
			if cap(z.L0) >= int(zb0002) {
				z.L0 = (z.L0)[:zb0002]
			} else {
				z.L0 = make([]string, zb0002)
			}
			for za0001 := range z.L0 {
				z.L0[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "L0", za0001)
					return
				}
			}
		case "Levels":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Levels")
				return
			}
			if cap(z.Levels) >= int(zb0003) {
				z.Levels = (z.Levels)[:zb0003]
			} else {
				z.Levels = make([][]string, zb0003)
			}
			for za0002 := range z.Levels {
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Levels", za0002)
					return
				}
				if cap(z.Levels[za0002]) >= int(zb0004) {
					z.Levels[za0002] = (z.Levels[za0002])[:zb0004]
				} else {
					z.Levels[za0002] = make([]string, zb0004)
				}
				for za0003 := range z.Levels[za0002] {
					z.Levels[za0002][za0003], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Levels", za0002, za0003)
						return
					}
				}
			}
		case "Table":
			z.Table, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Table")
				return
			}
		case "CreatedAt":
			z.CreatedAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "Path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "BlockSize":
			z.BlockSize, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockSize")
				return
			}
		case "LevelCount":
			z.LevelCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LevelCount")
				return
			}
		case "MaxLevels":
			z.MaxLevels, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxLevels")
				return
			}
		case "SeqNum":
			z.SeqNum, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SeqNum")
				return
			}
		case "NextFileNumber":
			z.NextFileNumber, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NextFileNumber")
				return
			}
		case "LastFlushedFileNumber":
			z.LastFlushedFileNumber, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastFlushedFileNumber")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Manifest) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.Id) + 3 + msgp.ArrayHeaderSize
	for za0001 := range z.L0 {
		s += msgp.StringPrefixSize + len(z.L0[za0001])
	}
	s += 7 + msgp.ArrayHeaderSize
	for za0002 := range z.Levels {
		s += msgp.ArrayHeaderSize
		for za0003 := range z.Levels[za0002] {
			s += msgp.StringPrefixSize + len(z.Levels[za0002][za0003])
		}
	}
	s += 6 + msgp.StringPrefixSize + len(z.Table) + 10 + msgp.Int64Size + 5 + msgp.StringPrefixSize + len(z.Path) + 10 + msgp.Uint64Size + 11 + msgp.IntSize + 10 + msgp.IntSize + 7 + msgp.Uint64Size + 15 + msgp.Uint64Size + 22 + msgp.Uint64Size
	return
}
